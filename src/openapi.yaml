openapi: 3.0.0
info:
  title: Submission Service
  version: 1.0.0
  description: The Submission Service is response for managing the user submissions for dsa and api sheets.
    Code Submission Management - Handles the incoming code submissions from users, sending it to Judge0 engine for evaluation, and storing the result.
    Real-time Submission Status - Returns real-time submission status and results.
    Submission History Management - Maintains submission history per user/problem.

servers:
  - url: /submission-svc/api/v1.0
    description: Local development server

components:
  schemas:
    testCasesData:
      title: Schema for Sheet Test Cases
      type: object
      properties:
        input:
          type: string
          minLength: 1
        output:
          type: string
      required:
        - input
        - output

    registerSubmissionPayload:
      type: object
      properties:
        sheetId:
          type: string
          description: Sheet ID
          minLength: 30
        languageId:
          type: string
          description: Language ID
          minLength: 30
        code:
          type: string
          description: Problem code
        testCases:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/testCasesData'
      required:
        - sheetId
        - languageId
        - code

    testCaseResponseData:
      title: Schema for Test Case response Data
      type: object
      properties:
        id:
          type: string
        input:
          type: string
        output:
          type: string
        actualOutput:
          type: string
        message:
          type: string
        error:
          type: string
          nullable: true
        status:
          type: string
      required:
        - id
        - input
        - output
        - actualOutput
        - message
        - error
        - status

    errorMsgData:
      title: Schema for Error Message Detail response
      type: object
      properties:
        id:
          type: string
        input:
          type: string
        output:
          type: string
        actualOutput:
          type: string
        error:
          type: string
          nullable: true
        message:
          type: string
        description:
          type: string
          nullable: true
        status:
          type: string

    getSubmitTypeByIDResponseData:
      title: Schema for retrieving Submission Details
      type: object
      properties:
        id:
          type: string
        languageId:
          type: string
        status:
          type: string
        runtimeMsg:
          type: string
        code:
          type: string
        maxMemoConsumption:
          type: string
        maxTimeConsumption:
          type: string
        avgMemoConsumption:
          type: string
        avgTimeConsumption:
          type: string
        startTime:
          type: string
          nullable: true
        endTime:
          type: string
          nullable: true
        submittedAt:
          type: string
          nullable: true
        testCaseResponse:
          type: array
          items:
            $ref: '#/components/schemas/testCaseResponseData'
        errorMsg:
          $ref: "#/components/schemas/errorMsgData"
      required:
        - languageId
        - code
        - maxMemoConsumption
        - maxTimeConsumption
        - avgMemoConsumption
        - avgTimeConsumption

    healthCheckData:
      title: Schema for Health Check Data
      type: object
      properties:
        uptime:
          type: string
        timestamp:
          type: string
        hostname:
          type: string

    healthCheckSuccessResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/healthCheckData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    getSubmitTypeByIDResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        type:
          type: string
          example: 'REQUEST_COMPLETED'
        message:
          type: string
          example: 'Request Completed'
        devMessage:
          type: string
          example: 'Request Completed'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/getSubmitTypeByIDResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    noContentResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 204
        type:
          type: string
          example: 'CONTENT_NOT_AVAILABLE'
        message:
          type: string
          example: 'No content available'
        devMessage:
          type: string
          example: 'No content available'
        success:
          type: boolean
          example: true
        data:
          type: array

    unauthorizedResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 401
        type:
          type: string
          example: 'UNAUTHORIZED'
        message:
          type: string
          example: 'Unauthorized'
        devMessage:
          type: string
          example: Unauthorized access. Could not proceed with the request.
        errors:
          type: array
        stack:
          type: string
        data:
          type: array

    badRequestResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        type:
          type: string
          example: 'BAD_REQUEST'
        message:
          type: string
          example: 'Bad Request'
        devMessage:
          type: string
          example: Bad Request. Required resource does not exist.
        errors:
          type: array
        stack:
          type: string
        data:
          type: array

    forbiddenResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 403
        type:
          type: string
          example: 'FORBIDDEN'
        message:
          type: string
          example: 'Forbidden'
        devMessage:
          type: string
          example: Forbidden access. Could not proceed with the request.
        errors:
          type: array
        stack:
          type: string
        data:
          type: array

    notFound:
      type: object
      properties:
        statusCode:
          type: integer
          example: 404
        type:
          type: string
          example: 'NOT_FOUND'
        message:
          type: string
          example: 'Resource Not Found'
        devMessage:
          type: string
          example: Not Found. Requested resource does not exist.
        errors:
          type: array
        stack:
          type: string
        data:
          type: array

    requestTimeout:
      type: object
      properties:
        statusCode:
          type: integer
          example: 408
        type:
          type: string
          example: 'REQUEST_TIMEOUT'
        message:
          type: string
          example: 'Request timeout.'
        devMessage:
          type: string
          example: 'Request timeout.'
        errors:
          type: array
        stack:
          type: string
        data:
          type: array

    userAlreadyExist:
      type: object
      properties:
        statusCode:
          type: integer
          example: 409
        type:
          type: string
          example: 'CONFLICT'
        message:
          type: string
          example: 'Resource already exist'
        devMessage:
          type: string
          example: 'Resource already exist'
        errors:
          type: array
        stack:
          type: string
        data:
          type: array

    unsupportedMedia:
      type: object
      properties:
        statusCode:
          type: integer
          example: 415
        type:
          type: string
          example: 'UNSUPPORTED_MEDIA'
        message:
          type: string
          example: 'The media format of the requested data is not supported by the server.'
        devMessage:
          type: string
          example: 'The media format of the requested data is not supported by the server.'
        errors:
          type: array
        stack:
          type: string
        data:
          type: array

    unprocessableContent:
      type: object
      properties:
        statusCode:
          type: integer
          example: 422
        type:
          type: string
          example: 'UNPROCESSABLE_CONTENT'
        message:
          type: string
          example: 'The request was unabled to be followed due to semantic/internal errors.'
        devMessage:
          type: string
          example: 'The request was unabled to be followed due to semantic/internal errors.'
        errors:
          type: array
        stack:
          type: string
        data:
          type: array

    internalServerErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 500
        type:
          type: string
          example: 'Internal Server Error'
        message:
          type: string
          example: 'Internal Server Error'
        devMessage:
          type: string
          example: 'Internal Server Error'
        errors:
          type: array
        stack:
          type: string
        data:
          type: array

paths:
  /health:
    get:
      operationId: healthCheck
      summary: Service Health Check
      description: An API to check the health status of the service.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthCheckSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /submission:
    post:
      operationId: registerSubmissionsForUser
      summary: Register New Submissions for Users.
      description: AN API to register new submission for user in a system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerSubmissionPayload'
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum:
              - PUBLIC
              - PRIVATE
          required: true
          description: Process by test cases type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSubmitTypeByIDResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '408':
          description: REQUEST_TIMEOUT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestTimeout'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '415':
          description: UNSUPPORTED_MEDIA
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unsupportedMedia'
        '422':
          description: UNPROCESSABLE_CONTENT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unprocessableContent'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'